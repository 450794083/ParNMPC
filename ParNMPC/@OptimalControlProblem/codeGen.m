function codeGen(OCP)
    % init C if it is empty
    if OCP.dim.mu == 0
       OCP.C = symfun(zeros(0,1),[OCP.u;OCP.x;OCP.p]);
    end
    % init G if it is empty
    G_formula = formula(OCP.G);
    [GDim,unused] = size(G_formula);
    if GDim == 0
       OCP.G = symfun(zeros(0,1),[OCP.u;OCP.x;OCP.p]);
    end
    % 
    if OCP.isMEnabled
        % forced to 'Euler'
        OCP.discretizationMethod = 'Euler';
    else
        % init M if it is disabled
        OCP.M = symfun(eye(OCP.dim.x),[OCP.u;OCP.x;OCP.p]);
    end
    %
    %% G, Gu, Gx
    Gu = jacobian(OCP.G,OCP.u);
    Gx = jacobian(OCP.G,OCP.x);
    UXP = {OCP.u;OCP.x;OCP.p};
    matlabFunction(OCP.G,...
    'File','./funcgen/OCP_GEN_G',...
    'Vars',UXP,...
    'Outputs',{'G'});
    matlabFunction(Gu,...
    'File','./funcgen/OCP_GEN_Gu',...
    'Vars',UXP,...
    'Outputs',{'Gu'});
    matlabFunction(Gx,...
        'File','./funcgen/OCP_GEN_Gx',...
        'Vars',UXP,...
        'Outputs',{'Gx'});
    %% L, Lu, Lx
    Lu = jacobian(OCP.L,OCP.u);
    Lx = jacobian(OCP.L,OCP.x);
    UXP = {OCP.u;OCP.x;OCP.p};
    matlabFunction(OCP.L,...
        'File','./funcgen/OCP_GEN_L',...
        'Vars',UXP,...
        'Outputs',{'L'});
    matlabFunction(Lu,...
    'File','./funcgen/OCP_GEN_Lu',...
    'Vars',UXP,...
    'Outputs',{'Lu'});
    matlabFunction(Lx,...
        'File','./funcgen/OCP_GEN_Lx',...
        'Vars',UXP,...
        'Outputs',{'Lx'});
    %% LBarrier, LBarrieru, LBarrierx
    LBarrierAll = symfun(OCP.LBarrier.all,[OCP.u;OCP.x;OCP.p;OCP.barrierPara]);
    
    LBarrieru = jacobian(LBarrierAll,OCP.u);
    LBarrierx = jacobian(LBarrierAll,OCP.x);
    UXPbarrierPara = {OCP.u;OCP.x;OCP.p;OCP.barrierPara};
    matlabFunction(LBarrierAll,...
        'File','./funcgen/OCP_GEN_LBarrier',...
        'Vars',UXPbarrierPara,...
        'Outputs',{'LBarrier'});
    matlabFunction(LBarrieru,...
    'File','./funcgen/OCP_GEN_LBarrieru',...
    'Vars',UXPbarrierPara,...
    'Outputs',{'LBarrieru'});
    matlabFunction(LBarrierx,...
        'File','./funcgen/OCP_GEN_LBarrierx',...
        'Vars',UXPbarrierPara,...
        'Outputs',{'LBarrierx'});
    %% C, Cu, Cx
    Cu = jacobian(OCP.C,OCP.u);
    Cx = jacobian(OCP.C,OCP.x);
    matlabFunction(OCP.C,...
    'File','./funcgen/OCP_GEN_C',...
    'Vars',UXP,...
        'Outputs',{'C'});
    matlabFunction(Cu,...
        'File','./funcgen/OCP_GEN_Cu',...
        'Vars',UXP,...
        'Outputs',{'Cu'});
    matlabFunction(Cx,...
        'File','./funcgen/OCP_GEN_Cx',...
        'Vars',UXP,...
        'Outputs',{'Cx'});
    
    %% f, fu, fx, M(optional)
    fudt = jacobian(OCP.f*OCP.deltaTau,OCP.u);
    fxdt = jacobian(OCP.f*OCP.deltaTau,OCP.x);
    matlabFunction(OCP.f*OCP.deltaTau,...
    'File','./funcgen/OCP_GEN_fdt',...
    'Vars',UXP,...
        'Outputs',{'fdt'});
    matlabFunction(fudt,...
        'File','./funcgen/OCP_GEN_fudt',...
        'Vars',UXP,...
        'Outputs',{'fudt'});
    matlabFunction(fxdt,...
        'File','./funcgen/OCP_GEN_fxdt',...
        'Vars',UXP,...
        'Outputs',{'fxdt'});
    matlabFunction(OCP.M,...
            'File','./funcgen/OCP_GEN_M',...
            'Vars',UXP,...
        'Outputs',{'M'});
    if OCP.isMEnabled
        % Mx
        Mx = sym('Mx',[OCP.dim.x (OCP.dim.x*OCP.dim.x)]);
        for i = 1:OCP.dim.x
            Mx(:,(i-1)*OCP.dim.x+1:i*OCP.dim.x) = formula(diff(OCP.M,OCP.x(i)));
        end
        MxSymfun = symfun(Mx,[OCP.u;OCP.x;OCP.p]);
        matlabFunction(MxSymfun,...
            'File','./funcgen/OCP_GEN_Mx.m',...
            'Vars',UXP,...
            'Outputs',{'Mx'});
        % Mu
        Mu = sym('Mu',[OCP.dim.x (OCP.dim.x*OCP.dim.u)]);
        for i = 1:OCP.dim.u
            Mu(:,(i-1)*OCP.dim.x+1:i*OCP.dim.x) = formula(diff(OCP.M,OCP.u(i)));
        end
        MuSymfun = symfun(Mu,[OCP.u;OCP.x;OCP.p]);
        matlabFunction(MuSymfun,...
            'File','./funcgen/OCP_GEN_Mu.m',...
            'Vars',UXP,...
            'Outputs',{'Mu'});
    end
end